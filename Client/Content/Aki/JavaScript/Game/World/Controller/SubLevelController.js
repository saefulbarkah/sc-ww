
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SubLevelController=void 0;const CustomPromise_1=require("../../../Core/Common/CustomPromise"),Log_1=require("../../../Core/Common/Log"),Queue_1=require("../../../Core/Container/Queue"),Protocol_1=require("../../../Core/Define/Net/Protocol"),ControllerBase_1=require("../../../Core/Framework/ControllerBase"),Net_1=require("../../../Core/Net/Net"),ResourceSystem_1=require("../../../Core/Resource/ResourceSystem"),FNameUtil_1=require("../../../Core/Utils/FNameUtil"),Rotator_1=require("../../../Core/Utils/Math/Rotator"),Vector_1=require("../../../Core/Utils/Math/Vector"),CameraUtility_1=require("../../Camera/CameraUtility"),EventDefine_1=require("../../Common/Event/EventDefine"),EventSystem_1=require("../../Common/Event/EventSystem"),Global_1=require("../../Global"),GlobalData_1=require("../../GlobalData"),ConfigManager_1=require("../../Manager/ConfigManager"),ControllerHolder_1=require("../../Manager/ControllerHolder"),ModelManager_1=require("../../Manager/ModelManager"),GameModePromise_1=require("../Define/GameModePromise"),AsyncTask_1=require("../Task/AsyncTask"),TaskSystem_1=require("../Task/TaskSystem"),WorldGlobal_1=require("../WorldGlobal");class SubLevelInfo{constructor(e,o,r,a,t,l){this.UnloadLevels=void 0,this.Levels=void 0,this.ScreenEffect=0,this.Location=void 0,this.Rotator=void 0,this.Callback=void 0,this.UnloadLevels=e,this.Levels=o,this.ScreenEffect=r,this.Location=a??void 0,this.Rotator=t??void 0,this.Callback=l??void 0}Clear(){this.UnloadLevels=void 0,this.Levels=void 0,this.ScreenEffect=0,this.Location=void 0,this.Rotator=void 0,this.Callback=void 0}}class SubLevelController extends ControllerBase_1.ControllerBase{static Init(){var e=super.Init();return this.OnRegisterNetEvent(),this.aWs=new Queue_1.Queue,e}static Clear(){return this.OnUnRegisterNetEvent(),this.aWs?.Clear(),this.aWs=void 0,super.Clear()}static OnRegisterNetEvent(){Net_1.Net.Register(16412,SubLevelController.b0r),Net_1.Net.Register(18250,SubLevelController.q0r)}static OnUnRegisterNetEvent(){Net_1.Net.UnRegister(16412),Net_1.Net.UnRegister(18250)}static LoadOrUnloadSubLevel(e,r){if(e?.length){var o=ModelManager_1.ModelManager.SubLevelModel.GetAllSubLevels();const l=new Array,n=new Array;var a,t=new Set;if(e)for(const i of e)t.add(i),o.has(i)||n.push(i);for([a]of o)t.has(a)||l.push(a);(l.length||n.length)&&(ModelManager_1.ModelManager.GameModeModel.AddLoadMapHandle("LoadOrUnloadSubLevel"),e=new AsyncTask_1.AsyncTask("LoadOrUnloadSubLevel",async()=>{const o=new CustomPromise_1.CustomPromise;return SubLevelController.ChangeSubLevel(l,n,0,void 0,void 0,e=>{e||Log_1.Log.CheckError()&&Log_1.Log.Error("InstanceDungeon",3,"加载或者卸载子关卡失败",["unloads",l],["newLoads",n]),ModelManager_1.ModelManager.GameModeModel.RemoveLoadMapHandle("LoadOrUnloadSubLevel"),e&&ModelManager_1.ModelManager.GameModeModel.MapDone&&ControllerHolder_1.ControllerHolder.CreatureController.CreateEntityFromPending(Protocol_1.Aki.Protocol.Nks.Proto_Normal),o.SetResult(e)},r),o.Promise}),TaskSystem_1.TaskSystem.AddTask(e),TaskSystem_1.TaskSystem.Run())}}static ChangeSubLevel(e,o,r,a,t,l,n){var i=new Map;for(const s of o){var _=n?.indexOf(s)??-1;i.set(s,_<0)}this.Lfr(e,i,r,a,t,l)}static hWs(e){e&&this.aWs?.Push(e)}static async Lfr(e,o,r,a,t,l){var n=ModelManager_1.ModelManager.GameModeModel,i=ModelManager_1.ModelManager.SubLevelLoadingModel;if(n.WorldDone)if(i.LoadSubLeveling)Log_1.Log.CheckError()&&Log_1.Log.Error("GameMode",3,"当前正在加载子关卡，等所有子关卡加载完成才能继续加载新的子关卡。"),this.hWs(new SubLevelInfo(e,o,r,a,t,l));else{if(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:(开始)",["卸载的子关卡",e?.join()],["加载的子关卡",o?.keys()],["位置",a],["旋转",t]),i.LoadSubLeveling=!0,i.LoadSubLevelPromise=new GameModePromise_1.GameModePromise,0!==(ModelManager_1.ModelManager.SubLevelLoadingModel.ScreenEffect=r)&&(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:打开黑幕Loading界面(开始)"),await ControllerHolder_1.ControllerHolder.LevelLoadingController.WaitOpenLoading(14,3),Log_1.Log.CheckInfo())&&Log_1.Log.Info("GameMode",3,"切换子关卡:打开黑幕Loading界面(完成)"),ResourceSystem_1.ResourceSystem.SetLoadModeInLoading(GlobalData_1.GlobalData.World,"GameModeController.ChangeSubLevelInternal"),a&&Global_1.Global.BaseCharacter.KuroSetMovementMode({Mode:0,Context:"[GameModeController.ChangeSubLevelInternal]"}),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"切换子关卡:等待之前的子关卡列表卸载(开始)"),await ControllerHolder_1.ControllerHolder.SubLevelController.WaitSubLevelsUnLoad(),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"切换子关卡:等待之前的子关卡列表卸载(结束)"),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"切换子关卡:等待之前的子关卡列表加载(开始)"),await ControllerHolder_1.ControllerHolder.SubLevelController.WaitSubLevelsLoad(),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"切换子关卡:等待之前的子关卡列表加载(结束)"),e?.length){Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:卸载子关卡列表(开始)");for(const _ of e)ModelManager_1.ModelManager.SubLevelModel.RemoveSubLevel(_);await ControllerHolder_1.ControllerHolder.SubLevelController.WaitSubLevelsUnLoad(),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:卸载子关卡列表(完成)")}o?.size&&(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:加载子关卡列表(开始)"),await ControllerHolder_1.ControllerHolder.SubLevelController.LoadSubLevels(o),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.OnSubLevelAdded),Log_1.Log.CheckInfo())&&Log_1.Log.Info("GameMode",3,"切换子关卡:加载子关卡列表(完成)"),SubLevelController.Dfr(a,t),ResourceSystem_1.ResourceSystem.SetLoadModeInGame(GlobalData_1.GlobalData.World,"GameModeController.ChangeSubLevelInternal"),0!==r&&(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:关闭黑幕Loading界面(开始)"),await ControllerHolder_1.ControllerHolder.LevelLoadingController.WaitCloseLoading(14,1),Log_1.Log.CheckInfo())&&Log_1.Log.Info("GameMode",3,"切换子关卡:关闭黑幕Loading界面(完成)"),i.LoadSubLevelPromise.SetResult(!0),i.LoadSubLevelPromise=void 0,i.LoadSubLeveling=!1,Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:(完成)"),l?.(!0),this.lWs()}else Log_1.Log.CheckError()&&Log_1.Log.Error("GameMode",3,"切换子关卡:WorldDone为false,切换子关卡失败。"),l?.(!1)}static lWs(){var e;!this.aWs||this.aWs.Size<=0||0!==this.aWs.Size&&((e=this.aWs.Front)?(this.aWs.Pop(),this.Lfr(e.UnloadLevels,e.Levels,e.ScreenEffect,e.Location,e.Rotator,e.Callback)):this.aWs.Pop())}static Dfr(e,o){e&&(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:设置玩家位置、地面修正(开始)",["Location",e]),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.TeleportStart,!0),EventSystem_1.EventSystem.EmitWithTarget(Global_1.Global.BaseCharacter.CharacterActorComponent.Entity,EventDefine_1.EEventName.TeleportStartEntity,!0),ControllerHolder_1.ControllerHolder.GameModeController.FixBornLocation(e),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.BeforeTeleportComplete),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.TeleportComplete,0),Log_1.Log.CheckInfo())&&Log_1.Log.Info("GameMode",3,"切换子关卡:设置玩家位置、地面修正(结束)",["修正后的Location",Global_1.Global.BaseCharacter.CharacterActorComponent.ActorLocationProxy]),o&&(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:设置玩家旋转(开始)",["Rotator",o]),Global_1.Global.BaseCharacter.CharacterActorComponent.SetInputRotator(o),Global_1.Global.BaseCharacter.CharacterActorComponent.SetActorRotation(WorldGlobal_1.WorldGlobal.ToUeRotator(o),"切换子关卡:设置玩家旋转",!1),ControllerHolder_1.ControllerHolder.CameraController.FightCamera.LogicComponent.SetRotation(CameraUtility_1.CameraUtility.GetCameraDefaultFocusUeRotator()),Log_1.Log.CheckInfo())&&Log_1.Log.Info("GameMode",3,"切换子关卡:设置玩家旋转(结束)",["Rotator",Global_1.Global.BaseCharacter.CharacterActorComponent.ActorRotationProxy])}static async PreloadSubLevel(e){var o=ModelManager_1.ModelManager.SubLevelModel;if(!ModelManager_1.ModelManager.GameModeModel.WorldDone)return Log_1.Log.CheckError()&&Log_1.Log.Error("GameMode",29,"预加载子关卡:WorldDone为false,预加载子关卡失败"),!1;Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"预加载子关卡:(开始)",["加载的子关卡",e?.join()]);var r=new Array;for(const a of e)o.GetPreloadOrLoadedSubLevel(a)||r.push(a);return r?.length&&await SubLevelController._W_(r),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"预加载子关卡:(完成)"),!0}static async _W_(e){var o=ModelManager_1.ModelManager.SubLevelModel,r=new Array;for(const l of e){var a,t=o.AddPreloadSubLevel(l);t&&(t.IsPreload=!0,t.LoadType=1,r.push(t.LoadPromise.Promise),a=GlobalData_1.GlobalData.GameInstance.场景加载通知器.LoadStreamLevel(FNameUtil_1.FNameUtil.GetDynamicFName(l),!1,!1),t.LinkId=a,Log_1.Log.CheckInfo())&&Log_1.Log.Info("World",3,"切换子关卡:加载子关卡(预加载)",["Path",t.Path],["LinkId",a])}return await Promise.all(r),!0}static async CheckLoadSubLevels(e){var o=new Map;if(e.URs?.length)for(const t of e.URs){var r=e.D$_.indexOf(t);o.set(t,r<0)}else{var a=ModelManager_1.ModelManager.GameModeModel.InstanceDungeon?.SubLevels;if(a)for(const l of a)o.set(l,!0)}return!o.size||this.LoadSubLevels(o)}static async LoadSubLevel(e,o){var r=ModelManager_1.ModelManager.SubLevelModel;let a=r.GetPreloadSubLevel(e);if(a){r.MovePreloadSubLevelToSubLevel(e),1===a.LoadType&&await a.LoadPromise.Promise;const l=new CustomPromise_1.CustomPromise;var t=()=>{l.SetResult()};a.Level.OnLevelShown.Add(t),a.Level.SetShouldBeVisible(o),await l.Promise,a.Level.OnLevelShown.Remove(t)}else(a=r.AddSubLevel(e))&&(0===a.LoadType&&(t=GlobalData_1.GlobalData.GameInstance.场景加载通知器.LoadStreamLevel(FNameUtil_1.FNameUtil.GetDynamicFName(e),o,!1),a.LinkId=t,Log_1.Log.CheckInfo())&&Log_1.Log.Info("World",3,"切换子关卡:加载子关卡",["Path",e],["LinkId",t]),await a.LoadPromise.Promise);return!0}static async LoadSubLevels(e){var o,r,a=new Array;for([o,r]of e)a.push(SubLevelController.LoadSubLevel(o,r));return await Promise.all(a),!0}static async WaitSubLevelsLoad(){var e=ModelManager_1.ModelManager.SubLevelModel,o=e.GetAllSubLevels(),e=e.GetAllPreloadSubLevels();if(o.size||e.size){var r,a,t=new Array;for([,r]of e)1===r.LoadType&&t.push(r.LoadPromise.Promise);for([,a]of o)1===a.LoadType&&t.push(a.LoadPromise.Promise);t.length&&await Promise.all(t)}return!0}static async WaitSubLevelsUnLoad(){var e=ModelManager_1.ModelManager.SubLevelModel.GetAllUnloadSubLevels();if(e.size){var o,r=new Array;for([,o]of e)r.push(o.UnLoadPromise.Promise);r.length&&await Promise.all(r)}return!0}static RequestSetSubLevelVisible(e,o){e=Protocol_1.Aki.Protocol.x$_.create({k$_:e,D$_:o});Net_1.Net.Call(25248,e,e=>{e.Q4n!==Protocol_1.Aki.Protocol.Q4n.KRs&&(e=ConfigManager_1.ConfigManager.ErrorCodeConfig.GetTextByErrorId(e.Q4n),Log_1.Log.CheckInfo())&&Log_1.Log.Info("GeneralLogicTree",18,e)})}static OnLoadSubLevel(e,o,r){var a,t=ModelManager_1.ModelManager.SubLevelModel;let l=void 0;for([,a]of t.GetAllPreloadSubLevels())if(a.LinkId===e){l=a;break}if(!l)for(var[,n]of t.GetAllSubLevels())if(n.LinkId===e){l=n;break}if(!l&&(l=t.GetUnloadSubLevel(o)))return l.LoadPromise?.SetResult(!0),t=FNameUtil_1.FNameUtil.GetDynamicFName(l.Path),void(l.UnLoadLinkId=GlobalData_1.GlobalData.GameInstance.场景加载通知器.UnloadStreamLevel(t,!0));l?(l.LoadType=2,l.Level=r,l.LoadPromise.SetResult(!0),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",29,"切换子关卡:子关卡加载完成",["Level",o],["IsPreload",l.IsPreload],["LevelStreaming",r?.IsValid()])):Log_1.Log.CheckWarn()&&Log_1.Log.Warn("GameMode",3,"切换子关卡:加载的子关卡不存在",["LinkId",e],["Level",o],["LevelStreaming",r?.IsValid()])}static OnUnLoadSubLevel(e,o){var r=ModelManager_1.ModelManager.SubLevelModel,a=r.GetUnloadSubLevel(o);a?(r.RemoveUnloadSubLevel(o),a.UnLoadPromise.SetResult(!0),Log_1.Log.CheckInfo()&&Log_1.Log.Info("GameMode",3,"切换子关卡:子关卡卸载完成",["Level",o],["LinkId",e],["LoadLinkId",a.LinkId])):Log_1.Log.CheckWarn()&&Log_1.Log.Warn("GameMode",3,"切换子关卡:卸载的子关卡不存在",["LinkId",e],["Level",o])}}(exports.SubLevelController=SubLevelController).aWs=void 0,SubLevelController.b0r=e=>{let o=void 0,r=void 0;var a=ModelManager_1.ModelManager.AutoRunModel;if(e.$Ds&&-1!==e.$Ds){var t=ModelManager_1.ModelManager.CreatureModel.GetEntityData(e.$Ds);if(t){var l=t.Transform.Pos,l=(l&&(o=Vector_1.Vector.Create(l.X??0,l.Y??0,l.Z??0)),t.Transform.Rot);l&&(r=Rotator_1.Rotator.Create(l.Y??0,l.Z??0,l.X??0))}else if(Log_1.Log.CheckError()&&Log_1.Log.Error("World",3,"[CreatureController.SceneSubLevelsChangedNotify] 要传送的TeleportEntityId不存在。",["TeleportEntityId",e.$Ds]),!a?.IsInAfterRunningState())return}a?.IsInAfterRunningState()&&(a.ShouldTpAfterSkip?(t=a.GetOverrideTpInfo()??a.GetGuaranteeTpInfo())&&(o=t.Location,r=t.Rotator):(o=void 0,r=void 0));const n=new Array;var i=new Array;const _=new Array;l=ModelManager_1.ModelManager.SubLevelModel.GetAllSubLevels();if(l)for(var[s]of l)(e.FDs.includes(s)?i:n).push(s);for(const d of e.FDs)i.includes(d)||_.push(d);SubLevelController.ChangeSubLevel(n,_,0,o,r,e=>{e||Log_1.Log.CheckError()&&Log_1.Log.Error("InstanceDungeon",39,"加载子关卡失败",["unloads",n],["newLoads",_]),ModelManager_1.ModelManager.AutoRunModel?.IsInAfterRunningState()&&ModelManager_1.ModelManager.AutoRunModel.StopAutoRunAndClearInfo()})},SubLevelController.q0r=e=>{SubLevelController.LoadOrUnloadSubLevel(e.HDs,e.B$_)};
//# sourceMappingURL=SubLevelController.js.map