
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.GravityUtils=void 0;const Quat_1=require("../../Core/Utils/Math/Quat"),Rotator_1=require("../../Core/Utils/Math/Rotator"),Vector_1=require("../../Core/Utils/Math/Vector"),MathUtils_1=require("../../Core/Utils/MathUtils");class GravityUtils{static GetAngleOffsetFromCurrentToInput(t){var r;return!t.MoveComp||t.MoveComp.IsStandardGravity?MathUtils_1.MathUtils.WrapAngle(t.InputRotatorProxy.Yaw-t.ActorRotationProxy.Yaw):(r=Math.acos(Vector_1.Vector.DotProduct(t.ActorForwardProxy,t.InputFacingProxy))*MathUtils_1.MathUtils.RadToDeg,Vector_1.Vector.CrossProduct(t.ActorForwardProxy,t.InputFacingProxy,this.TmpVector),0<Vector_1.Vector.DotProduct(this.TmpVector,t.MoveComp.GravityDirect)?-r:r)}static GetAngleOffsetFromCurrentToInputAbs(t){return!t.MoveComp||t.MoveComp.IsStandardGravity?Math.abs(MathUtils_1.MathUtils.WrapAngle(t.InputRotatorProxy.Yaw-t.ActorRotationProxy.Yaw)):Math.acos(Vector_1.Vector.DotProduct(t.ActorForwardProxy,t.InputFacingProxy))*MathUtils_1.MathUtils.RadToDeg}static ConvertToPlanarVectorForActor(t,r){var i;return!t?.MoveComp||t.MoveComp.IsStandardGravity?(i=r.Z,r.Z=0):(i=-Vector_1.Vector.DotProduct(r,t.MoveComp.GravityDirect),t.MoveComp.GravityDirect.Multiply(i,this.TmpVector),r.AdditionEqual(this.TmpVector)),i}static GetPlanarSizeSquared2dForActor(t,r){return!t.MoveComp||t.MoveComp.IsStandardGravity?r.SizeSquared2D():(t=r.DotProduct(t.MoveComp.GravityDirect),r.SizeSquared()-t*t)}static GetAngleOffsetInGravityForActor(t,r,i){var a;return!t.MoveComp||t.MoveComp.IsStandardGravity?MathUtils_1.MathUtils.WrapAngle(MathUtils_1.MathUtils.GetAngleByVector2D(i)-MathUtils_1.MathUtils.GetAngleByVector2D(r)):(a=Math.acos(Vector_1.Vector.DotProduct(r,i))*MathUtils_1.MathUtils.RadToDeg,Vector_1.Vector.CrossProduct(r,i,this.TmpVector),0<Vector_1.Vector.DotProduct(this.TmpVector,t.MoveComp.GravityDirect)?-a:a)}static GetAngleOffsetInGravityAbsForActor(t,r,i){return!t.MoveComp||t.MoveComp.IsStandardGravity?(t=MathUtils_1.MathUtils.WrapAngle(MathUtils_1.MathUtils.GetAngleByVector2D(i)-MathUtils_1.MathUtils.GetAngleByVector2D(r)),Math.abs(t)):Math.acos(Vector_1.Vector.DotProduct(r,i))*MathUtils_1.MathUtils.RadToDeg}static TurnVectorByDirectionInGravityForActor(r,i,a){if(0!==a)if(!r.MoveComp||r.MoveComp.IsStandardGravity){let t=0;switch(a){case 1:i.X=-i.X,i.Y=-i.Y;break;case 2:t=i.X,i.X=i.Y,i.Y=-t;break;case 3:t=-i.X,i.X=i.Y,i.Y=-t}}else{let t=0;switch(a){case 1:t=180;break;case 2:t=90;break;case 3:t=-90;break;default:return}Quat_1.Quat.ConstructorByAxisAngle(r.MoveComp.GravityDirect,-t,this.TmpQuat),this.TmpQuat.RotateVector(i,i)}}static GetQuatFromRotatorAndGravity(t,r,i){r.Quaternion(this.TmpQuat),this.TmpQuat.RotateVector(Vector_1.Vector.ForwardVectorProxy,this.TmpVector),.99<Math.abs(this.TmpVector.DotProduct(t))&&this.TmpQuat.RotateVector(Vector_1.Vector.UpVectorProxy,this.TmpVector),t.UnaryNegation(this.TmpVector2),MathUtils_1.MathUtils.LookRotationUpFirst(this.TmpVector,this.TmpVector2,i)}static GetQuatFromRotatorAndGravityForActor(t,r,i){!t.MoveComp||t.MoveComp.IsStandardGravity?(this.TmpRotator.Set(0,r.Yaw,0),this.TmpRotator.Quaternion(i)):this.GetQuatFromRotatorAndGravity(t.MoveComp.GravityDirect,r,i)}static GetZnInGravity(t,r){return-Vector_1.Vector.DotProduct(r,t)}static GetZnInGravityForActor(t,r){return!t?.MoveComp||t.MoveComp.IsStandardGravity?r.Z:this.GetZnInGravity(t.MoveComp.GravityDirect,r)}static SetZnInGravity(t,r,i){var a=-Vector_1.Vector.DotProduct(r,t);t.Multiply(a-i,this.TmpVector),r.AdditionEqual(this.TmpVector)}static SetZnInGravityForActor(t,r,i){!t?.MoveComp||t.MoveComp.IsStandardGravity?r.Z=i:this.SetZnInGravity(t.MoveComp.GravityDirect,r,i)}static AddZnInGravity(t,r,i){t.Multiply(-i,this.TmpVector),r.AdditionEqual(this.TmpVector)}static AddZnInGravityForActor(t,r,i){!t?.MoveComp||t.MoveComp.IsStandardGravity?r.Z+=i:this.AddZnInGravity(t.MoveComp.GravityDirect,r,i)}}(exports.GravityUtils=GravityUtils).TmpVector=Vector_1.Vector.Create(),GravityUtils.TmpVector2=Vector_1.Vector.Create(),GravityUtils.TmpQuat=Quat_1.Quat.Create(),GravityUtils.TmpRotator=Rotator_1.Rotator.Create();
//# sourceMappingURL=GravityUtils.js.map