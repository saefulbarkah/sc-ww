
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.TipsOverPowerData=exports.TipsCharacterData=exports.TipsVisionData=exports.TipsWeaponData=exports.TipsMaterialData=exports.ItemTipsData=void 0;const MultiTextLang_1=require("../../../../Core/Define/ConfigQuery/MultiTextLang"),PhantomRarityByRare_1=require("../../../../Core/Define/ConfigQuery/PhantomRarityByRare"),Protocol_1=require("../../../../Core/Define/Net/Protocol"),StringUtils_1=require("../../../../Core/Utils/StringUtils"),TimeUtil_1=require("../../../Common/TimeUtil"),ConfigManager_1=require("../../../Manager/ConfigManager"),ControllerHolder_1=require("../../../Manager/ControllerHolder"),ModelManager_1=require("../../../Manager/ModelManager"),VisionDetailDescComponent_1=require("../../Phantom/Vision/View/VisionDetailDescComponent"),VisionDetailInfoComponent_1=require("../../Phantom/Vision/View/VisionDetailInfoComponent"),SkipTaskManager_1=require("../../SkipInterface/SkipTaskManager");class ItemTipsData{constructor(t,i,e){this.ItemType=0,this.GetWayData=void 0,this.LimitTimeTxt=void 0,this.CanClickLockButton=t=>!0;var a=ConfigManager_1.ConfigManager.InventoryConfig.GetItemConfigData(t),s=(this.IncId=i||0,this.ConfigId=t,this.Title=a.Name,this.QualityId=a.QualityId,[]);if(a.ItemAccess&&0<a.ItemAccess?.length)for(const r of a.ItemAccess){var o=ConfigManager_1.ConfigManager.GetWayConfig.GetConfigById(r);o&&(o={Id:r,Type:o?.Type,Text:o?.Description,SortIndex:o?.SortIndex,Function:()=>{SkipTaskManager_1.SkipTaskManager.RunByConfigId(r,t)}},s.push(o))}this.GetWayData=s}CanDeprecate(){var t;return!(this.IncId<=0)&&void 0!==(t=ModelManager_1.ModelManager.InventoryModel?.GetAttributeItemData(this.IncId))&&t.CanDeprecate()}}class TipsMaterialData extends(exports.ItemTipsData=ItemTipsData){constructor(t,i){super(t,i),this.FunctionSpritePath=void 0,this.ItemType=0;var e=ConfigManager_1.ConfigManager.InventoryConfig.GetItemConfigData(t),a=(this.MaterialType=e.TypeDescription,this.FunctionSpritePath=this.cxt(e?.ItemBuffType),ModelManager_1.ModelManager.InventoryModel.GetItemCountByConfigId(t,i)),a=(this.Num=a,this.TxtEffect=e.AttributesDescription,this.TxtDescription=e.BgDescription,ModelManager_1.ModelManager.InventoryModel.GetCommonItemData(t,i));a?.IsLimitTimeItem()&&(e=a.GetEndTime(),t=TimeUtil_1.TimeUtil.GetDataFromTimeStamp(e*TimeUtil_1.TimeUtil.Millisecond),i=MultiTextLang_1.configMultiTextLang.GetLocalTextNew("Text_ItemExpired_text"),this.LimitTimeTxt=StringUtils_1.StringUtils.Format(i,t.Month,t.Day,t.Hour+":"+t.Minute))}cxt(t){var i=ModelManager_1.ModelManager.MediumItemGridModel;switch(t){case 0:break;case 1:return i.AttackBuffSpritePath;case 2:return i.DefenseBuffSpritePath;case 3:return i.RestoreHealthBuffSpritePath;case 4:return i.RechargeBuffSpritePath;case 5:return i.ResurrectionBuffSpritePath;case 6:return i.ExploreBuffSpritePath}}}exports.TipsMaterialData=TipsMaterialData;class TipsWeaponData extends ItemTipsData{constructor(t,i){super(t,i),this.WeaponType="",this.WeaponLevel=0,this.WeaponLimitLevel=0,this.BreachLevel=0,this.BreachMaxLevel=0,this.WeaponStage=0,this.WeaponSkillName="",this.WeaponEffect="",this.WeaponEffectParam=void 0,this.WeaponDescription="",this.AttributeData=void 0,this.IsEquip=!1,this.EquippedId=void 0;var e,a,s,o,r,n=ModelManager_1.ModelManager.InventoryModel.GetAttributeItemData(i),n=i?n.GetConfig():ConfigManager_1.ConfigManager.InventoryConfig.GetWeaponItemConfig(t);void 0!==n&&(i=(t=i?ModelManager_1.ModelManager.WeaponModel.GetWeaponDataByIncId(i):void 0)?t.GetWeaponConfig():ConfigManager_1.ConfigManager.WeaponConfig.GetWeaponConfigByItemId(n.ItemId),n=t?t.GetBreachLevel():0,o=t?t.GetResonanceLevel():1,e=t?t.GetBreachConfig():ConfigManager_1.ConfigManager.WeaponConfig.GetWeaponBreach(i.BreachId,n),s=i.BreachId,a=ConfigManager_1.ConfigManager.WeaponConfig.GetWeaponResonanceConfig(i.ResonId,o),this.ItemType=1,this.WeaponType=ConfigManager_1.ConfigManager.WeaponConfig.GetWeaponTypeName(i.WeaponType),r=t?t.GetLevel():1,e=e.LevelLimit,this.WeaponLevel=r,this.WeaponLimitLevel=e,this.BreachLevel=n,e=ModelManager_1.ModelManager.WeaponModel.GetWeaponBreachMaxLevel(s),this.BreachMaxLevel=e,this.WeaponStage=o,this.WeaponSkillName=a.Name,this.WeaponEffect=i.Desc,s=ModelManager_1.ModelManager.WeaponModel.GetWeaponConfigDescParams(i,o),this.WeaponEffectParam=s,this.WeaponDescription=i.AttributesDescription,e=[],a=i.FirstPropId.Id,o=ConfigManager_1.ConfigManager.PropertyIndexConfig.GetPropertyIndexInfo(a),s=ModelManager_1.ModelManager.WeaponModel.GetCurveValue(i.FirstCurve,i.FirstPropId.Value,r,n),a={Id:a,IsMainAttribute:!0,Name:o.Name,IconPath:o.Icon,Value:s,IsRatio:i.FirstPropId.IsRatio},s=i.SecondPropId.Id,o=ConfigManager_1.ConfigManager.PropertyIndexConfig.GetPropertyIndexInfo(s),r=ModelManager_1.ModelManager.WeaponModel.GetCurveValue(i.SecondCurve,i.SecondPropId.Value,r,n),n={Id:s,IsMainAttribute:!0,Name:o.Name,IconPath:o.Icon,Value:r,IsRatio:i.SecondPropId.IsRatio},e.push(a),e.push(n),this.AttributeData=e,t)&&(this.EquippedId=t.GetRoleId(),this.IsEquip=0!==this.EquippedId)}}exports.TipsWeaponData=TipsWeaponData;class TipsVisionData extends ItemTipsData{constructor(i,e,a){super(i,e),this.VisionId=0,this.VisionType="",this.Cost=0,this.UpgradeLevel="",this.MainSkillText="",this.MainSkillParams=void 0,this.SkillUniqueText=void 0,this.SkillUniqueTextParam=void 0,this.SkillUniqueRoleId=void 0,this.AttributeData=void 0,this.IsEquip=!1,this.EquippedId=void 0;let t=this.VisionDetailInfoComponentData=void 0;t=a instanceof Protocol_1.Aki.Protocol.t5s?ModelManager_1.ModelManager.InventoryModel.GetPhantomItemDataByPhantomItem(a):ModelManager_1.ModelManager.InventoryModel.GetAttributeItemData(e);var i=ConfigManager_1.ConfigManager.InventoryConfig.GetPhantomItemConfig(i),s=e?t.GetConfig():i;if(void 0!==s){var o=ModelManager_1.ModelManager.PhantomBattleModel;let t=void 0;a=(t=a instanceof Protocol_1.Aki.Protocol.t5s?ModelManager_1.ModelManager.PhantomBattleModel.GetPhantomBattleDataByPhantomItem(a):e?o.GetPhantomBattleData(e):void 0)?t.GetPhantomLevel():0,o=t?t.GetQuality():1,s=(this.ItemType=2,this.VisionId=s.MonsterId,s.Rarity),s=(this.VisionType=PhantomRarityByRare_1.configPhantomRarityByRare.GetConfig(s).Desc,this.Cost=ConfigManager_1.ConfigManager.PhantomBattleConfig.GetPhantomRareConfig(s).Cost,ConfigManager_1.ConfigManager.TextConfig.GetTextById("VisionLevel"));this.UpgradeLevel=StringUtils_1.StringUtils.Format(s,a.toString());const l=new VisionDetailInfoComponent_1.VisionDetailInfoComponentData;var s=ConfigManager_1.ConfigManager.PhantomBattleConfig,r=(i&&!t&&(i=i.SkillId,g=s.GetPhantomSkillBySkillId(i),this.MainSkillText=g.DescriptionEx,this.MainSkillParams=s.GetPhantomSkillDescExByPhantomSkillIdAndQuality(i,o),VisionDetailDescComponent_1.VisionDetailDesc.ConvertVisionSkillDescToDescData(g,a,!0,!0,o).forEach(t=>{l.AddDescData(t)})),[]),s=t?.GetMainPropShowAttributeList(1);if(void 0!==s)for(const M of s){var n=ConfigManager_1.ConfigManager.PropertyIndexConfig.GetPropertyIndexInfo(M.Id),n={Id:M.Id,IsMainAttribute:!0,Name:n.Name,IconPath:n.Icon,Value:M.BaseValue,IsRatio:M.IsRatio};r.push(n)}i=t?.GetSubPropShowAttributeList(1);if(void 0!==i)for(const _ of i){var h=ConfigManager_1.ConfigManager.PropertyIndexConfig.GetPropertyIndexInfo(_.Id),h={Id:_.Id,IsMainAttribute:!1,Name:h.Name,IconPath:h.Icon,Value:_.BaseValue,IsRatio:_.IsRatio};r.push(h)}this.AttributeData=r;var g=ControllerHolder_1.ControllerHolder.PhantomBattleController.GetEquipRole(e),a=(g&&(this.EquippedId=g,this.IsEquip=0!==this.EquippedId),(l.DataBase=t)?.GetPreviewShowFetterList(-1,0));t&&VisionDetailDescComponent_1.VisionDetailDesc.ConvertVisionSkillDescToDescData(t?.GetNormalSkillConfig(),t.GetPhantomLevel(),!0,!0,o).forEach(t=>{l.AddDescData(t)}),a&&VisionDetailDescComponent_1.VisionDetailDesc.ConvertVisionFetterDataToDetailDescData(a,!1).forEach(t=>{l.AddDescData(t)}),this.VisionDetailInfoComponentData=l}}}exports.TipsVisionData=TipsVisionData;class TipsCharacterData extends ItemTipsData{constructor(t,i){super(t,i),this.mxt="",this.Qst=void 0,this.dxt="",this.Cxt="",this.ItemType=3;i=ConfigManager_1.ConfigManager.RoleConfig;let e=i.GetRoleConfig(t);t=e.ParentId,i=(e=0<t?i.GetRoleConfig(t):e).ElementId;this.mxt=e.Name,this.Qst=ConfigManager_1.ConfigManager.ElementInfoConfig.GetElementInfo(i),this.dxt=e.RoleHeadIconBig,this.Cxt=e.Introduction}GetRoleName(){return this.mxt}GetElementConfig(){return this.Qst}GetHeadTexutePath(){return this.dxt}GetRoleIntroduction(){return this.Cxt}}exports.TipsCharacterData=TipsCharacterData;class TipsOverPowerData extends ItemTipsData{constructor(t,i){super(t,i),this.ItemType=4}}exports.TipsOverPowerData=TipsOverPowerData;
//# sourceMappingURL=ItemTipsDefine.js.map