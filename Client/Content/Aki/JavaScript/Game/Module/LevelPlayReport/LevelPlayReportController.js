
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LevelPlayReportController=void 0;const Log_1=require("../../../Core/Common/Log"),Protocol_1=require("../../../Core/Define/Net/Protocol"),Net_1=require("../../../Core/Net/Net"),ConfigManager_1=require("../../Manager/ConfigManager"),ControllerHolder_1=require("../../Manager/ControllerHolder"),ModelManager_1=require("../../Manager/ModelManager"),UiControllerBase_1=require("../../Ui/Base/UiControllerBase");class LevelPlayReportController extends UiControllerBase_1.UiControllerBase{static async RequestSimpleTrackReportAsync(){var e=Protocol_1.Aki.Protocol.fZl.create(),e=await Net_1.Net.CallAsync(22111,e);e&&(e.Q4n!==Protocol_1.Aki.Protocol.Q4n.KRs?ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(e.Q4n,29183):ModelManager_1.ModelManager.LevelPlayReportModel.UpdateSimpleReportMsg(e.xn1))}static async CheckAndRequestLevelPlayVarAsync(e,o){ModelManager_1.ModelManager.LevelPlayReportModel.HasRequestDetail(e,o)||await LevelPlayReportController.RequestLevelPlayVarAsync(e,o)}static async RequestLevelPlayVarAsync(e,o){var r=Protocol_1.Aki.Protocol.TZl.create(),r=(r.r6n=e,r._ps=o,await Net_1.Net.CallAsync(25807,r));r&&(ModelManager_1.ModelManager.LevelPlayReportModel.SetRequestDetailFlag(e,o),r.Q4n!==Protocol_1.Aki.Protocol.Q4n.KRs?ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(r.Q4n,27753):ModelManager_1.ModelManager.LevelPlayReportModel.UpdateDetailReportMsg(e,o,r.hEs))}static async RequestPlayPointStateAsync(e,o){var r=Protocol_1.Aki.Protocol.se1.create(),o=(r.yOl=e,r.r6n=o,Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Map",69,"LevelPlayReportController.RequestPlayPointStateAsync"),Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Map",69,"se1",["",r]),await Net_1.Net.CallAsync(29090,r));Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Map",69,"bZl",["",o]),o&&(o.Q4n!==Protocol_1.Aki.Protocol.Q4n.KRs?ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(o.Q4n,27753):ModelManager_1.ModelManager.ExploreProgressModel.UpdatePlayPointState(e,o.wn1))}static async RequestLevelPlayStateListAsync(){var e=Protocol_1.Aki.Protocol.Ue1.create(),o=ConfigManager_1.ConfigManager.MapConfig.GetGamePlayMarkCacheReqList(),o=(e.X9l=o,await Net_1.Net.CallAsync(24653,e));o&&(o.Q4n!==Protocol_1.Aki.Protocol.Q4n.KRs?Log_1.Log.CheckError()&&Log_1.Log.Error("LevelPlayReport",63,"请求玩法点状态返回失败:",["ErrorCode:",o.Q4n]):ModelManager_1.ModelManager.LevelPlayReportModel.UpdateLevelPlayStateMsg(o.Rn1))}}exports.LevelPlayReportController=LevelPlayReportController;
//# sourceMappingURL=LevelPlayReportController.js.map