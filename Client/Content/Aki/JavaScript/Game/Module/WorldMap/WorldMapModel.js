
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorldMapModel=void 0;const Log_1=require("../../../Core/Common/Log"),Time_1=require("../../../Core/Common/Time"),CommonParamById_1=require("../../../Core/Define/ConfigCommon/CommonParamById"),Protocol_1=require("../../../Core/Define/Net/Protocol"),ModelBase_1=require("../../../Core/Framework/ModelBase"),Vector_1=require("../../../Core/Utils/Math/Vector"),EventDefine_1=require("../../Common/Event/EventDefine"),EventSystem_1=require("../../Common/Event/EventSystem"),LocalStorage_1=require("../../Common/LocalStorage"),LocalStorageDefine_1=require("../../Common/LocalStorageDefine"),ConfigManager_1=require("../../Manager/ConfigManager"),ControllerHolder_1=require("../../Manager/ControllerHolder"),ModelManager_1=require("../../Manager/ModelManager"),UiManager_1=require("../../Ui/UiManager"),MapUtil_1=require("../Map/MapUtil"),MapLogger_1=require("../Map/Misc/MapLogger"),WorldMapAxisInteractValidation_1=require("./WorldMapAxisInteractValidation");class WorldMapModel extends ModelBase_1.ModelBase{constructor(){super(...arguments),this.LevelEventDisableFlag=!1,this.CustomMarkSize=0,this.MapScale=-0,this.MapScaleMin=-0,this.MapScaleMax=-0,this.FOl=!0,this.VOl=!0,this.fhl=void 0,this.CurrentFocalMarkType=0,this.CurrentFocalMarkId=0,this.WorldMapMapId=void 0,this.WorldMapCurrentMultiMapId=void 0,this.LastBigSceneMiniMapInfo=void 0,this.IsBattleViewOpen=!1,this.WorldMapAxisInteractValidation=new WorldMapAxisInteractValidation_1.WorldMapAxisInteractValidation,this.DDl=new Map,this.ADl=new Map,this.Xql=0,this.MapRangeInfo=void 0,this.NavigateMarkShowRangeInfo=void 0,this.p3o=void 0}get CustomMarksIsShow(){return this.FOl}get CompletedPlayPointMarkIsShow(){return this.VOl}get WaitToTeleportMarkConfigId(){return this.fhl}set WaitToTeleportMarkConfigId(e){this.fhl=e}OnInit(){return this.CustomMarkSize=ConfigManager_1.ConfigManager.WorldMapConfig.GetCommonValue("custom_mark_size"),this.ResetMapScale(),this.WorldMapAxisInteractValidation.Init(),this.Xql=1e3*(CommonParamById_1.configCommonParamById.GetFloatConfig("SoundBoxSfxCoolTime")??0),this.WorldMapMapId=void 0,this.LastBigSceneMiniMapInfo=void 0,this.VOl=LocalStorage_1.LocalStorage.GetGlobal(LocalStorageDefine_1.ELocalStorageGlobalKey.IsShowFinishedPlayPointMark,!0),this.FOl=LocalStorage_1.LocalStorage.GetGlobal(LocalStorageDefine_1.ELocalStorageGlobalKey.IsShowCustomMark,!0),!0}OnClear(){return this.WorldMapAxisInteractValidation.Clear(),this.DDl.clear(),this.ADl.clear(),MapLogger_1.MapLogger.Clear(),!0}OnLeaveLevel(){return!0}ResetMapScale(){this.MapScale=(ConfigManager_1.ConfigManager.WorldMapConfig.GetAkiMapConfig(1)?.BigMapDefaultScale??0)/100;var e=ConfigManager_1.ConfigManager.WorldMapConfig.GetAkiMapConfig(1);e&&(this.MapScaleMax=e.BigMapMaxScale/e.BigMapDefaultScale,this.MapScaleMin=e.BigMapMinScale/e.BigMapDefaultScale)}GetEntityPosition(e,r){r=ConfigManager_1.ConfigManager.MapConfig.GetEntityConfigByMapIdAndEntityId(r,e)?.Transform[0];return r?Vector_1.Vector.Create(r.X,r.Y,r.Z):Vector_1.Vector.Create(0,0,0)}GetEntityAreaId(e,r){return ModelManager_1.ModelManager.CreatureModel.GetEntityData(e,r)?.AreaId??0}UpdateAreaExploreInfo(e){if(e){var r=new Array;for(const o of e.HVn)r.push({ExploreProgressId:o.qPs,ExplorePercent:o.BPs});this.p3o={AreaId:e.p6n,ExploreProgress:r,ExplorePercent:e.BPs}}}GetAreaExploreInfo(){return this.p3o}RecordPlaySoundMarkSfx(e){var r=Time_1.Time.ServerStopTimeStamp;this.DDl.set(e,r)}SetPlaySoundMarkSfxForbidden(e,r){this.ADl.set(e,r)}IsSoundMarkSfxCoolingDown(e){var e=this.DDl.get(e)??0,r=this.Xql;return Time_1.Time.ServerStopTimeStamp-e<=r}IsSoundMarkSfxForbidden(e){return this.ADl.get(e)??!1}SetCompletedPlayPointMarkShow(e){return this.VOl!==e&&(this.VOl=e,LocalStorage_1.LocalStorage.SetGlobal(LocalStorageDefine_1.ELocalStorageGlobalKey.IsShowFinishedPlayPointMark,e),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.ToggleShowCompletedPlayMark,e),!0)}SetCustomMarksShow(e){return this.FOl!==e&&(this.FOl=e,LocalStorage_1.LocalStorage.SetGlobal(LocalStorageDefine_1.ELocalStorageGlobalKey.IsShowCustomMark,e),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.ToggleShowCustomMark,e),!0)}GetPlayerPosition(){var e=MapUtil_1.MapUtil.GetCurrentBigMapId();return MapUtil_1.MapUtil.IsInBigWorld(e)?(e=ModelManager_1.ModelManager.SceneTeamModel.GetCurrentEntity?.Entity?.GetComponent(3))?Vector_1.Vector.Create(e.ActorLocationProxy):Vector_1.Vector.Create():MapUtil_1.MapUtil.GetLastBigScenePlayerPosition()}IsPlayerInInstanceDungeon(){var e=ModelManager_1.ModelManager.GameModeModel.InstanceDungeon?.InstType,r=ModelManager_1.ModelManager.GameModeModel.InstanceDungeon?.InstSubType;return!(e===Protocol_1.Aki.Protocol.i4s.Proto_BigWorldInstance&&13===r)}InstIsType(e,r,o){e=ConfigManager_1.ConfigManager.InstanceDungeonConfig.GetConfig(e);return e?.InstType===r&&e?.InstSubType===o}CheckGamePlayIsTracked(e){var r,o;return!!this.NavigateMarkShowRangeInfo&&(Log_1.Log.CheckDebug()&&Log_1.Log.Debug("World",69,"检查玩法是否需要追踪",["playInfo-playId",e.Id],["NavigateMarkShowRangeInfo",this.NavigateMarkShowRangeInfo]),this.NavigateMarkShowRangeInfo.GamePlayId===e.Id)&&!UiManager_1.UiManager.IsViewOpen("WorldMapView")&&(e=this.NavigateMarkShowRangeInfo.MarkId,r=this.NavigateMarkShowRangeInfo.MarkType,o=this.NavigateMarkShowRangeInfo.ExploreTypeName,o=ConfigManager_1.ConfigManager.TextConfig.GetMultiTextByKey(o,o),ModelManager_1.ModelManager.MapModel.CreateTempMapMark(e),ControllerHolder_1.ControllerHolder.MapController.RequestTrackMapMark(r,e,!0),ControllerHolder_1.ControllerHolder.ScrollingTipsController.ShowTipsByTextId("PlayPointFind_Text",o),!0)}}exports.WorldMapModel=WorldMapModel;
//# sourceMappingURL=WorldMapModel.js.map