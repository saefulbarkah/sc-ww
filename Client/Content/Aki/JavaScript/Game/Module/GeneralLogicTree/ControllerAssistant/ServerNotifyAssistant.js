
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ServerNotifyAssistant=void 0;const Log_1=require("../../../../Core/Common/Log"),Protocol_1=require("../../../../Core/Define/Net/Protocol"),Net_1=require("../../../../Core/Net/Net"),MathUtils_1=require("../../../../Core/Utils/MathUtils"),EventDefine_1=require("../../../Common/Event/EventDefine"),EventSystem_1=require("../../../Common/Event/EventSystem"),ControllerHolder_1=require("../../../Manager/ControllerHolder"),ModelManager_1=require("../../../Manager/ModelManager"),UiManager_1=require("../../../Ui/UiManager"),ActionTask_1=require("../../../World/Task/ActionTask"),DelayTask_1=require("../../../World/Task/DelayTask"),TaskSystem_1=require("../../../World/Task/TaskSystem"),ConfirmBoxController_1=require("../../ConfirmBox/ConfirmBoxController"),ConfirmBoxDefine_1=require("../../ConfirmBox/ConfirmBoxDefine"),GeneralLogicTreeDefine_1=require("../Define/GeneralLogicTreeDefine"),ControllerAssistantBase_1=require("./ControllerAssistantBase");class ServerNotifyAssistant extends ControllerAssistantBase_1.ControllerAssistantBase{constructor(){super(...arguments),this.X$t=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),o=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);o?(Log_1.Log.CheckInfo()&&Log_1.Log.Info("Quest",18,"行为树节点状态更新",["树Id",o.TreeConfigId],["节点Id",e.b5n],["节点状态",GeneralLogicTreeDefine_1.btNodeStatusLogString[e.H6n]]),o.UpdateNodeState(0,e.b5n,e.H6n)):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"收到节点状态更新协议时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",t])},this.$$t=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),o=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);o?(Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Quest",18,"行为树节点进度更新",["树Id",o.TreeConfigId],["节点Id",e.b5n]),o.UpdateNodeProgress(e.b5n,e.nvs)):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"收到节点进度更新协议时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",t])},this.Y$t=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),t=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);t?(Log_1.Log.CheckInfo()&&Log_1.Log.Info("Quest",18,"行为树ChildQuest节点状态更新",["树Id",t.TreeConfigId],["节点Id",e.b5n],["ChildQuest子节点状态",GeneralLogicTreeDefine_1.btChildQuestNodeStatusLogString[e.H6n]]),t.UpdateChildQuestNodeState(e.b5n,e.H6n,0)):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"收到子任务节点状态更新协议时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",e.C9n])},this.J$t=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),t=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);t?(Log_1.Log.CheckInfo()&&Log_1.Log.Info("GeneralLogicTree",18,"服务器通知客户端做回退准备",["treeConfigId",t.TreeConfigId]),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.GeneralLogicTreePrepareRollback,t.TreeConfigId),t.PrepareRollback(e.NEs,e.kEs)):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"服务器通知回退准备时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",e.C9n])},this.z$t=e=>{(e.FEs||e.VEs)&&(e=new DelayTask_1.DelayTask("OnBtRollbackStartNotify",void 0,()=>(ControllerHolder_1.ControllerHolder.LevelLoadingController.OpenLoading(2,3),!0)),TaskSystem_1.TaskSystem.AddTask(e),TaskSystem_1.TaskSystem.Run())},this.Z$t=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),o=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);if(o){Log_1.Log.CheckInfo()&&Log_1.Log.Info("GeneralLogicTree",18,"服务器通知行为树回退",["treeConfigId",o.TreeConfigId]);var r=ModelManager_1.ModelManager.GeneralLogicTreeModel,i=o.IsTracking();o.ExecuteTreeGuaranteeActions(),r.RemoveBehaviorTree(t);const n=r.CreateBehaviorTree(e.$Es);i&&(o.BtType===Protocol_1.Aki.Protocol.hps.Proto_BtTypeLevelPlay?ModelManager_1.ModelManager.LevelPlayModel.SetTrackLevelPlayId(0):n.SetTrack(!0));r=new ActionTask_1.ActionTask("OnRollbackInfoNotify",()=>(ControllerHolder_1.ControllerHolder.LevelLoadingController.CloseLoading(2),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.GeneralLogicTreePrepareRollbackFinish,n?.TreeConfigId??0),!0));TaskSystem_1.TaskSystem.AddTask(r),TaskSystem_1.TaskSystem.Run()}else Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"收到服务器回退通知时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",t]),ControllerHolder_1.ControllerHolder.LevelLoadingController.CloseLoading(2)},this.Phl=e=>{EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.OnQuestRedDotStateChange,e.B5n)},this.eYt=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),o=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);o?o.UpdateOccupations(e):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"收到服务器挂起通知时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",t])},this.iYt=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),o=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);o?o.UpdateTimer(e.HEs):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"服务器通知更新定时器时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",t])},this.oYt=e=>{var t=MathUtils_1.MathUtils.LongToBigInt(e.C9n),o=ModelManager_1.ModelManager.GeneralLogicTreeModel.GetBehaviorTree(t);o||Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",31,"服务器通知更新变量时：行为树不存在，1.检查本地配置是否正确 2.服务端检查协议下发顺序",["treeId",t]),o.UpdateTreeVars(e)},this.rYt=e=>{e=e.cEs;if(e&&0!==e.length)for(const t of e)ModelManager_1.ModelManager.GeneralLogicTreeModel.CreateBehaviorTree(t)},this.nYt=e=>{e=e.dEs;if(e&&0!==e.length)for(const o of e){var t=MathUtils_1.MathUtils.LongToBigInt(o);ModelManager_1.ModelManager.GeneralLogicTreeModel.RemoveBehaviorTree(t)}},this.sYt=e=>{ModelManager_1.ModelManager.AutoRunModel.ShouldFastSkip=e.C2s,ModelManager_1.ModelManager.AutoRunModel.SetAutoRunMode(e.C2s?"ServerControlledSkip":"Disabled"),ModelManager_1.ModelManager.AutoRunModel.SetAutoRunState(e.C2s?"Running":"Stopped")},this.uMa=e=>{var t=ModelManager_1.ModelManager.PlayerInfoModel.GetId();if(!t||e.W5n===t){const r=e.K4s;if(r)switch(r.st1){case Protocol_1.Aki.Protocol.ps1.Proto_ActionOpenSystem:var o=r.at1;o?((o=new ConfirmBoxDefine_1.ConfirmBoxDataNew(o.nt1)).FunctionMap.set(1,()=>{this.OpenSystemBoardResultRequest(0,r.w5n)}),o.FunctionMap.set(2,()=>{this.OpenSystemBoardResultRequest(1,r.w5n)}),ConfirmBoxController_1.ConfirmBoxController.ShowConfirmBoxNew(o)):Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"ActionOpenSystemBoardNotify:打开带返回值的确认框时，服务端下发参数为空");break;case Protocol_1.Aki.Protocol.ps1.Proto_SoaringChallenge:o=r.ht1;if(!o)return void(Log_1.Log.CheckError()&&Log_1.Log.Error("GeneralLogicTree",18,"ActionOpenSystemBoardNotify:打开翱翔结算时，服务端下发参数为空"));o=new GeneralLogicTreeDefine_1.FlySettlementViewParams(o.SMs,o.it1,o.rt1,o.ot1,ModelManager_1.ModelManager.GeneralLogicTreeModel.HistorySoarScore,r.w5n);UiManager_1.UiManager.OpenView("FlySettlementView",o)}}}}OnDestroy(){}OnRegisterNetEvent(){Net_1.Net.Register(26143,this.X$t),Net_1.Net.Register(22606,this.$$t),Net_1.Net.Register(23569,this.Y$t),Net_1.Net.Register(26748,this.J$t),Net_1.Net.Register(17587,this.z$t),Net_1.Net.Register(18874,this.Z$t),Net_1.Net.Register(29516,this.eYt),Net_1.Net.Register(29161,this.iYt),Net_1.Net.Register(26789,this.oYt),Net_1.Net.Register(17638,this.rYt),Net_1.Net.Register(16818,this.nYt),Net_1.Net.Register(22983,this.sYt),Net_1.Net.Register(16020,this.uMa),Net_1.Net.Register(21684,this.Phl)}OnUnRegisterNetEvent(){Net_1.Net.UnRegister(26143),Net_1.Net.UnRegister(22606),Net_1.Net.UnRegister(23569),Net_1.Net.UnRegister(26748),Net_1.Net.UnRegister(18874),Net_1.Net.UnRegister(29516),Net_1.Net.UnRegister(29161),Net_1.Net.UnRegister(26789),Net_1.Net.UnRegister(17638),Net_1.Net.UnRegister(16818),Net_1.Net.UnRegister(22983),Net_1.Net.UnRegister(16020),Net_1.Net.UnRegister(21684)}OpenSystemBoardResultRequest(e,t){var o=ModelManager_1.ModelManager.PlayerInfoModel.GetId(),o=Protocol_1.Aki.Protocol.p$l.create({W5n:o,j7n:e,w5n:t});Net_1.Net.Call(20587,o,e=>{e.Cvs!==Protocol_1.Aki.Protocol.Q4n.KRs&&ControllerHolder_1.ControllerHolder.ErrorCodeController.OpenErrorCodeTipView(e.Cvs,18449,void 0,!1)})}}exports.ServerNotifyAssistant=ServerNotifyAssistant;
//# sourceMappingURL=ServerNotifyAssistant.js.map