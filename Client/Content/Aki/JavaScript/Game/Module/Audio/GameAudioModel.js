
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.GameAudioModel=exports.CHECK_TIME_OUT_COOLDOWN_RECORD=void 0;const Log_1=require("../../../Core/Common/Log"),Time_1=require("../../../Core/Common/Time"),EntitySystem_1=require("../../../Core/Entity/EntitySystem"),ModelBase_1=require("../../../Core/Framework/ModelBase");exports.CHECK_TIME_OUT_COOLDOWN_RECORD=1e4;class EntityCooldownProbability{constructor(){this.EntityId=0,this.TagComp=void 0,this.AudioEventCooldownTimeMap=void 0}Init(t){this.EntityId=t,this.AudioEventCooldownTimeMap=new Map,this.TagComp=EntitySystem_1.EntitySystem.GetComponent(t,191)}Clear(){this.TagComp=void 0,this.AudioEventCooldownTimeMap?.clear(),this.AudioEventCooldownTimeMap=void 0}CheckTimeOutCooldownRecords(){this.AudioEventCooldownTimeMap||(this.AudioEventCooldownTimeMap=new Map);var t=[];for(const o of this.AudioEventCooldownTimeMap)Time_1.Time.Now-o[1].Time<Math.max(o[1].Cooldown,exports.CHECK_TIME_OUT_COOLDOWN_RECORD)?this.TagComp||(this.TagComp=EntitySystem_1.EntitySystem.GetComponent(this.EntityId,191)):(Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 记录的AudioEvent冷却时间一定时间未使用过，删除该条记录",["EntityId",this.EntityId],["AudioEvent",o[0]],["IntervalTime",Time_1.Time.Now-o[1].Time]),t.push(o[0]));for(const i of t)this.AudioEventCooldownTimeMap.delete(i);return 0===this.AudioEventCooldownTimeMap.size}CheckPlayAudio(o,i){if(this.TagComp&&0<i.TagProbability.Num())for(let t=0;t<i.TagProbability.Num();t++){var e,r=i.TagProbability.Get(t);if(this.TagComp.HasTag(r.GameplayTag.TagId))return(e=this.Xhl(o,r.Probability,r.CooldownTime))&&Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 通过了配置的概率和CD检查，正常播放AudioEvent",["EntityId",this.EntityId],["AudioEvent",o],["Tag",r.GameplayTag.TagName],["Probability",r.Probability],["CooldownTime",r.CooldownTime]),e}var t=this.Xhl(o,i.DefaultProbability,i.DefaultCooldownTime);return t&&Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 通过了默认概率和CD检查，正常播放AudioEvent",["EntityId",this.EntityId],["AudioEvent",o],["Probability",i.DefaultProbability],["CooldownTime",i.DefaultCooldownTime]),t}Xhl(t,o,i){if(this.Yhl(o)){this.AudioEventCooldownTimeMap||(this.AudioEventCooldownTimeMap=new Map);var e=this.AudioEventCooldownTimeMap.has(t)?Time_1.Time.Now-this.AudioEventCooldownTimeMap.get(t).Time:-1;if(e<0||i<e)return 0!==i&&(Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 通过概率和CD检查，更新Map",["EntityId",this.EntityId],["AudioEvent",t],["距离上一次播放",e]),this.AudioEventCooldownTimeMap.set(t,{Time:Time_1.Time.Now,Cooldown:i})),!0;Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 播放Audio不满足CD检查",["EntityId",this.EntityId],["AudioEvent",t],["CooldownTime",i],["距离上一次播放",e])}else Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 播放Audio不满足概率检查",["EntityId",this.EntityId],["AudioEvent",t],["Probability",o]);return!1}Yhl(t){return 1===t||0===t?1===t:Math.random()<t}}class GameAudioModel extends ModelBase_1.ModelBase{constructor(){super(...arguments),this.zhl=new Map}CheckTimeOutCooldownRecords(){var t=[];for(const o of this.zhl)o[1].CheckTimeOutCooldownRecords()&&(o[1].Clear(),t.push(o[0]));for(const i of t)Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Audio",42,"[EntityCooldownProbability] 记录的实体上所有AudioEvent都一定时间未使用过，删除该条记录",["EntityId",i]),this.zhl.delete(i)}CheckAudioProbabilityInfo(t,o,i){if(!i||0===i.DefaultCooldownTime&&1===i.DefaultProbability&&0===i.TagProbability.Num())return!0;if(0===i.DefaultProbability&&0===i.TagProbability.Num())return!1;if(!this.zhl.has(t)){const r=new EntityCooldownProbability;r.Init(t);var e=r.CheckPlayAudio(o,i);return e&&this.zhl.set(t,r),e}const r=this.zhl.get(t);return r.CheckPlayAudio(o,i)}}exports.GameAudioModel=GameAudioModel;
//# sourceMappingURL=GameAudioModel.js.map