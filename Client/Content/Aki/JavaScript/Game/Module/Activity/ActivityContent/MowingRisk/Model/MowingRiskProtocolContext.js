
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MowingRiskProtocolContext=void 0;const ActivityData_1=require("../../../ActivityData"),Log_1=require("../../../../../../Core/Common/Log"),MathUtils_1=require("../../../../../../Core/Utils/MathUtils"),TimeUtil_1=require("../../../../../Common/TimeUtil"),ModelManager_1=require("../../../../../Manager/ModelManager");class MowingRiskProtocolContext extends ActivityData_1.ActivityBaseData{constructor(){super(...arguments),this.QVa=new Map,this.KVa=void 0,this.$Va=new Map,this.XVa=new Set,this.zVa=new Set,this.JVa=0}Dispose(){}PhraseEx(t){t=t.Ut1;t&&this.ZVa(t)}GetExDataRedPointShowState(){var t=ModelManager_1.ModelManager.MowingRiskModel;return t.HasAnyReward||t.IsNewInstanceOpen}ParseRiskHarvestEndNotify(t){}ParseRiskHarvestInstUpdateNotify(t){this.L1h(t.ji1)}ParseRiskHarvestArtifactNotify(t){this.t9a(t.Xi1)}ParseRiskHarvestBuffUpdateNotify(t){this.t9a(t.Xi1)}ParseRiskHarvestBuffUnlockNotify(t){this.i9a(t.Ji1)}ParseRiskHarvestActivityUpdateNotify(t){t=t.Izs;void 0!==t&&this.ZVa(t)}L1h(t){for(const e of t)this.JVa-=this.QVa.get(e.s5n)?.SMs??0,this.QVa.set(e.s5n,e),this.JVa+=e.SMs}D1h(t){this.JVa=0;for(const e of t)this.QVa.set(e.s5n,e),this.JVa+=e.SMs}o9a(t){this.XVa.clear();for(const e of t)this.XVa.add(e)}i9a(t){for(const e of t)this.zVa.add(e)}t9a(t){if(void 0!==t){this.KVa=t,this.$Va.clear();for(const e of t.Vi1)this.$Va.set(e.s5n,e.m9n)}}ZVa(t){this.D1h(t.ji1),this.o9a(t.Hi1),this.i9a(t.Wi1)}get InstanceInfo(){return this.QVa}get ArtifactInfo(){return void 0===this.KVa&&Log_1.Log.CheckError()&&Log_1.Log.Error("MowingRisk",64,"尚未获得割草局内buff数据"),this.KVa}get ArtifactId(){return this.KVa?.s5n??0}get ArtifactBasicBuffTotalCount(){return this.KVa?.nvs??0}get BasicBuffInfoInBattle(){return this.$Va}get TotalScore(){return this.JVa}get UnlockBuffTotalCount(){return this.zVa.size}get UnlockBuff(){return this.zVa}IsBuffUnlocked(t){return this.zVa.has(t)}GetBuffCountInBattleById(t){return this.BasicBuffInfoInBattle.get(t)}GetScoreById(t){return this.QVa.get(t)?.SMs??0}IsInstanceUnlockedById(t){return this.QVa.get(t)?.K6n??!1}IsInstancePlayedById(t){return this.QVa.get(t)?.Ni1??!1}GetInstanceUnlockTimestampById(t){t=this.QVa.get(t)?.yzs;return void 0===t?Number.MAX_VALUE:MathUtils_1.MathUtils.LongToNumber(t)}IsInstancePassUnlockTimeById(t){return TimeUtil_1.TimeUtil.GetServerTimeStamp()>=this.GetInstanceUnlockTimestampById(t)}ResetCacheInBattle(){Log_1.Log.CheckDebug()&&Log_1.Log.Debug("MowingRisk",64,"ResetCacheInBattle"),this.KVa=void 0,this.$Va.clear()}HasScoreRewarded(t){return this.XVa.has(t)}}exports.MowingRiskProtocolContext=MowingRiskProtocolContext;
//# sourceMappingURL=MowingRiskProtocolContext.js.map