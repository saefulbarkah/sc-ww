
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PhonographController=void 0;const AudioSystem_1=require("../../../Core/Audio/AudioSystem"),CommonDefine_1=require("../../../Core/Define/CommonDefine"),Protocol_1=require("../../../Core/Define/Net/Protocol"),Net_1=require("../../../Core/Net/Net"),TimerSystem_1=require("../../../Core/Timer/TimerSystem"),EventDefine_1=require("../../Common/Event/EventDefine"),EventSystem_1=require("../../Common/Event/EventSystem"),ConfigManager_1=require("../../Manager/ConfigManager"),ModelManager_1=require("../../Manager/ModelManager"),UiControllerBase_1=require("../../Ui/Base/UiControllerBase"),UiManager_1=require("../../Ui/UiManager"),ErrorCodeController_1=require("../ErrorCode/ErrorCodeController"),ScrollingTipsController_1=require("../ScrollingTips/ScrollingTipsController");class PhonographController extends UiControllerBase_1.UiControllerBase{static async UnlockMusicRequest(e){var o=new Protocol_1.Aki.Protocol.JJl,e=(o.bMs=e,await Net_1.Net.CallAsync(20620,o));return!!e&&e.Q4n===Protocol_1.Aki.Protocol.Q4n.KRs&&(ModelManager_1.ModelManager.PhonographModel.NewMusicIds=e.$n1,void 0!==await UiManager_1.UiManager.OpenViewAsync("PhonographNewMusicView",e.$n1))}static SwitchMusicRequest(o,r){var e=new Protocol_1.Aki.Protocol.iZl;e.pxl=o,Net_1.Net.Call(16108,e,e=>{e.Q4n===Protocol_1.Aki.Protocol.Q4n.KRs&&(ScrollingTipsController_1.ScrollingTipsController.ShowTipsById("PhonographSwitchMusicSuccess"),ModelManager_1.ModelManager.PhonographModel.RecordMusicId=o,r())})}static async GetMusicInfoRequest(){var e=new Protocol_1.Aki.Protocol.eZl,e=await Net_1.Net.CallAsync(17421,e);if(e.Q4n===Protocol_1.Aki.Protocol.Q4n.KRs)return ModelManager_1.ModelManager.PhonographModel.UnlockMusicIds=e.Wn1,e;ErrorCodeController_1.ErrorCodeController.OpenErrorCodeTipView(e.Q4n,17421)}static PlayMusic(e,o=!0){var r=ModelManager_1.ModelManager.PhonographModel?.EntityActor,n=(PhonographController.PlayMusicTimer&&(TimerSystem_1.TimerSystem.Remove(PhonographController.PlayMusicTimer),PhonographController.PlayMusicTimer=void 0,r?.IsValid())&&AudioSystem_1.AudioSystem.StopAll(r),ConfigManager_1.ConfigManager.PhonographConfig?.GetMusicById(e));if(!n)return 0;if(!r?.IsValid())return 0;this.StopMusic(!1);r=AudioSystem_1.AudioSystem.PostEvent(n.MusicEvent,r);return o&&(ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTotalTime=n.Duration,ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTime=0,ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicId=e,PhonographController.PlayMusicTimer=TimerSystem_1.TimerSystem.Forever(()=>{ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTime+=1,ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTime>=ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTotalTime&&PhonographController.StopMusic(),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.OnPhonographPlayTick)},CommonDefine_1.MILLIONSECOND_PER_SECOND)),r}static StopMusic(e=!0){var o=ModelManager_1.ModelManager.PhonographModel?.EntityActor;o?.IsValid()&&AudioSystem_1.AudioSystem.StopAll(o),PhonographController.PlayMusicTimer&&(TimerSystem_1.TimerSystem.Remove(PhonographController.PlayMusicTimer),PhonographController.PlayMusicTimer=void 0),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.OnPhonographPlayStop),ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicId=0,ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTime=0,ModelManager_1.ModelManager.PhonographModel.CurrentPlayMusicTotalTime=0,e&&EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.OnPhonographSwitchMusic)}static ClearTimer(){PhonographController.PlayMusicTimer&&(TimerSystem_1.TimerSystem.Remove(PhonographController.PlayMusicTimer),PhonographController.PlayMusicTimer=void 0)}static PlayMusicByEntityId(e){var o,r,n=ModelManager_1.ModelManager.PhonographModel.GetPlayIdRecord(e),n=(0!==n&&AudioSystem_1.AudioSystem.ExecuteAction(n,0),ModelManager_1.ModelManager.PhonographModel.GetRecordMusicId(e));0!==n&&(n=ConfigManager_1.ConfigManager.PhonographConfig?.GetMusicById(n))&&(r=ModelManager_1.ModelManager.CreatureModel?.GetEntityByPbDataId(e))&&(o=r.Entity?.CheckGetComponent(1))&&(r=AudioSystem_1.AudioSystem.PostEvent(n.MusicEvent,o.Owner),ModelManager_1.ModelManager.PhonographModel.SetPlayIdRecord(e,r))}static StopMusicByEntityId(e){var o=ModelManager_1.ModelManager.PhonographModel.GetPlayIdRecord(e);0!==o&&(AudioSystem_1.AudioSystem.ExecuteAction(o,0),ModelManager_1.ModelManager.PhonographModel.RemovePlayIdRecord(e))}}(exports.PhonographController=PhonographController).PlayMusicTimer=void 0;
//# sourceMappingURL=PhonographController.js.map