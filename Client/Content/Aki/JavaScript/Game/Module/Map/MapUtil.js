
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MapUtil=void 0;const ue_1=require("ue"),Vector_1=require("../../../Core/Utils/Math/Vector"),Vector2D_1=require("../../../Core/Utils/Math/Vector2D"),IComponent_1=require("../../../UniverseEditor/Interface/IComponent"),ConfigManager_1=require("../../Manager/ConfigManager"),ModelManager_1=require("../../Manager/ModelManager"),GeneralLogicTreeController_1=require("../GeneralLogicTree/GeneralLogicTreeController"),MapDefine_1=require("./MapDefine"),MapLogger_1=require("./Misc/MapLogger");class MapUtil{static WorldPosition2UiPosition(e,r){r=r??Vector_1.Vector.Create();return e.Multiply(MapDefine_1.world2UiUnit,r),r}static WorldPosition2UiPosition2D(e,r){r=r??Vector2D_1.Vector2D.Create();return e.Multiply(MapDefine_1.worldToScreenScale,r)}static UiPosition2WorldPosition(e,r){r=r??Vector_1.Vector.Create();return e.Division(MapDefine_1.world2UiUnit,r)}static GetTilePosition(e,r=0){var e=Vector2D_1.Vector2D.Create(e),t=(e.DivisionEqual(100*MapDefine_1.DETAIL_TILE_REALSIZE),Math.ceil(e.X+r));return{X:t,Y:Math.ceil(-e.Y+r)}}static GetTilePositionByUiPosition(e){var e=Vector2D_1.Vector2D.Create(e),r=(e.DivisionEqual(MapDefine_1.DETAIL_TILE_REALSIZE),Math.ceil(e.X));return{X:r,Y:Math.ceil(e.Y)}}static GetTrackPositionByTrackTarget(e,r,t,a=!0){return e?(t=t??Vector_1.Vector.Create(),e instanceof Vector_1.Vector?t.DeepCopy(e):e instanceof Vector2D_1.Vector2D?t.Set(e.X,e.Y,0):e instanceof ue_1.Actor?e.IsValid()&&t.FromUeVector(e.K2_GetActorLocation()):MapUtil.GetEntityPosition(e,r,a,t),t):Vector_1.Vector.ZeroVectorProxy}static GetEntityPosition(e,r,t,a){let n=ModelManager_1.ModelManager.CreatureModel.GetEntityByPbDataId(e);n=n||ModelManager_1.ModelManager.CreatureModel.GetEntityById(e);a=a??Vector_1.Vector.Create();return n&&n?.IsInit?(GeneralLogicTreeController_1.GeneralLogicTreeController.GetEntityPos(n,r,a),a):(r=t?MapUtil.GetCurrentMapOrDungeonId():MapUtil.GetCurrentBigMapOrWorldMapId(),GeneralLogicTreeController_1.GeneralLogicTreeController.RequestEntityPosition(r,e,a),a?.Equality(Vector_1.Vector.ZeroVectorProxy)&&this.qDi(e,a,t),a??Vector_1.Vector.ZeroVectorProxy)}static GetCurrentBigMapOrWorldMapId(){var e=ModelManager_1.ModelManager.WorldMapModel.WorldMapMapId;return void 0===e?MapUtil.GetCurrentBigMapId():e}static GetCurrentBigMapId(){return 3===ModelManager_1.ModelManager.GameModeModel.MapId?MapDefine_1.BIG_WORLD_MAP_ID:ModelManager_1.ModelManager.GameModeModel.MapId}static CurrentInBigMap(){var e=this.GetCurrentMapOrDungeonId();return this.IsInBigWorld(e)}static GetCurrentMapOrDungeonId(){return ModelManager_1.ModelManager.GameModeModel.InstanceDungeon.MapConfigId}static IsInBigWorld(e){return ConfigManager_1.ConfigManager.WorldMapConfig.IsInBigWorld(e)}static GetConfigMarkBelongMapId(e,r){var t=MapUtil.GetCurrentBigMapOrWorldMapId();return 7===r?ConfigManager_1.ConfigManager.MapConfig.GetDynamicConfigMark(e)?.MapId??t:t}static GetMarkBelongMapId(e,r){var t,a=ModelManager_1.ModelManager.MapModel.GetMark(r,e);return void 0===a?void 0!==(t=ConfigManager_1.ConfigManager.MapConfig.GetConfigMark(e))?t.MapId:(MapLogger_1.MapLogger.Error(64,"[地图系统]找不到标记Id对应的地图Id->",["markId",e],["markType",r]),MapDefine_1.BIG_WORLD_MAP_ID):a.MapId??MapDefine_1.BIG_WORLD_MAP_ID}static GetWorldMapAreaId(e){return ModelManager_1.ModelManager.WorldMapModel.WorldMapMapId?MapUtil.CurrentInBigMap()?ModelManager_1.ModelManager.AreaModel.GetCurrentAreaId(e)??0:ModelManager_1.ModelManager.AreaModel.GetLastAreaId(e)??ModelManager_1.ModelManager.AreaModel.GetCurrentAreaId(e)??0:(MapLogger_1.MapLogger.Error(64,"[地图系统]获取世界地图玩家所处区域Id失败，请检查是否使用场景不正确->"),0)}static GetInstanceDungeonTempWorldName(e,r){return e===MapDefine_1.BIG_WORLD_MAP_ID?2e5<r.X&&r.Y<2e5?ConfigManager_1.ConfigManager.MapConfig.GetLocalText("Area_11_Title"):ConfigManager_1.ConfigManager.MapConfig.GetLocalText("Country_1_Title"):e===MapDefine_1.HHA_BIG_WORLD_MAP_ID?ConfigManager_1.ConfigManager.MapConfig.GetLocalText("Area_15_Title"):ConfigManager_1.ConfigManager.MapConfig.GetLocalText("Country_1_Title")}static qDi(e,r,t=!0){t=t?MapUtil.GetCurrentMapOrDungeonId():MapUtil.GetCurrentBigMapOrWorldMapId(),e=ModelManager_1.ModelManager.WorldMapModel.GetEntityPosition(e,t);e&&r.FromUeVector(e),r.Division(100,r)}static CrossingTest(r,t){let a=!1;var n;let o=!1;var i;let M=r[r.length-1],_=r[0],g=(a=M.Y>=t.Y,o=!1,0);var l=r.length;for(let e=0;e<l;e++)n=_.Y>=t.Y,a!==n&&((i=M.X>=t.X)==_.X>=t.X?i&&(o=!o):_.X-(_.Y-t.Y)*(M.X-_.X)/(M.Y-_.Y)>=t.X&&(o=!o),a=n),M=_,g+=1,_=r[g];return o}static IsTemporaryTeleportEntity(e){e=e.ComponentsData;return void 0!==(0,IComponent_1.getComponent)(e,"DynamicTeleportComponent")}static IsTreasureBox(e){e=e.ComponentsData;return void 0!==(0,IComponent_1.getComponent)(e,"TreasureBoxComponent")}static IsSoundBox(e){e=e.ComponentsData;return 8===(0,IComponent_1.getComponent)(e,"BaseInfoComponent").Category.ExploratoryDegree}static MinBoundingCircle(i,r=10){if(0!==i.length){if(1===i.length)return new MapDefine_1.Circle(i[0].X,i[0].Y,0);var e,t,a,n,M;if(2===i.length)return[n,M]=i,e=M.X-n.X,t=M.Y-n.Y,a=(n.X+M.X)/2,n=(n.Y+M.Y)/2,M=Math.sqrt(e*e+t*t)/2,new MapDefine_1.Circle(a,n,M);const s=i[0];let o=void 0;for(let e=0;e<r;e++){var _=i.filter(e=>Vector2D_1.Vector2D.Distance(e,s)<=Vector2D_1.Vector2D.Distance(e,i[Math.floor(Math.random()*i.length)]));_.length<i.length&&(_=MapUtil.MinBoundingCircle(_))&&(!o||_.R<o.R)&&(o=_)}if(!o||!i.every(e=>Vector2D_1.Vector2D.Distance(e,Vector2D_1.Vector2D.Create(o.X,o.Y))<=o.R)){let e=1/0,r=-1/0,t=1/0,a=-1/0;for(const p of i)e=Math.min(e,p.X),r=Math.max(r,p.X),t=Math.min(t,p.Y),a=Math.max(a,p.Y);var g=(e+r)/2,l=(t+a)/2;let n=0;for(const u of i){var c=Vector2D_1.Vector2D.Distance(Vector2D_1.Vector2D.Create(g,l),u);n=Math.max(n,c)}o=new MapDefine_1.Circle(g,l,n)}return o}}static IsDungeonDiffWorld(n,o){if(0!==n&&0!==o){var i=ConfigManager_1.ConfigManager.InstanceDungeonConfig.GetConfig(n),M=ConfigManager_1.ConfigManager.InstanceDungeonConfig.GetConfig(o);if(void 0!==i&&void 0!==M){let e=i.InstSubType,r=M.InstSubType,t=n,a=o;12===e&&(n=MapUtil.geh(i),e=n.InstSubType,t=n.Id),12===r&&(o=MapUtil.geh(M),r=o.InstSubType,a=o.Id);i=t===a;return!i&&13===e&&13===r}}}static GetInstanceDungeonBelongWorldId(e){if(0!==e){var r=ConfigManager_1.ConfigManager.InstanceDungeonConfig.GetConfig(e);if(void 0!==r){var t=r.InstSubType;if(12===t)return MapUtil.geh(r).Id;if(13!==t&&r.RecoverWorldLocation&&0<r.RecoverWorldLocation.length){t=r.RecoverWorldLocation[0];if(0!==t)return t}}}return e}static geh(e){var r,t;if(!(e.EntranceEntities.length<1))return r=e.EntranceEntities[0].DungeonId,void 0===(t=ConfigManager_1.ConfigManager.InstanceDungeonConfig.GetConfig(r))&&MapLogger_1.MapLogger.Error(64,"[地图系统]世界副本查找入口实体失败->入口副本配置为空",["config",e],["entranceDungeonId",r]),t;MapLogger_1.MapLogger.Error(64,"[地图系统]世界副本查找入口实体失败->实体列表为空",["config",e])}}exports.MapUtil=MapUtil;
//# sourceMappingURL=MapUtil.js.map