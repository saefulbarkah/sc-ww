
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CaveHoleMarkItem=void 0;const EventDefine_1=require("../../../../Common/Event/EventDefine"),EventSystem_1=require("../../../../Common/Event/EventSystem"),ModelManager_1=require("../../../../Manager/ModelManager"),CaveHoleMarkItemView_1=require("../MarkItemView/CaveHoleMarkItemView"),ConfigMarkItem_1=require("./ConfigMarkItem");class CaveHoleMarkItem extends ConfigMarkItem_1.ConfigMarkItem{constructor(){super(...arguments),this.Zbn=e=>{var t=this.LocateInGround();let i=!1;i=t&&0===e?0===e:this.GetMultiMapId()===ModelManager_1.ModelManager.WorldMapModel.WorldMapCurrentMultiMapId,this.IsSelectThisFloor!==i&&(this.IsSelectThisFloor=i,this.crl())}}Initialize(){2===this.MapType&&EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.WorldMapSubMapChangedFromUpdate,this.Zbn),this.mrl(),super.Initialize()}OnDestroy(){super.OnDestroy(),2===this.MapType&&EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.WorldMapSubMapChangedFromUpdate,this.Zbn)}OnCreateView(){this.InnerView=new CaveHoleMarkItemView_1.CaveHoleMarkItemView(this)}CheckCanShowView(){var e,t,i,s,r=super.CheckCanShowView();return this.IsMultiMap()?(e=this.GetMultiMapId(),t=this.GetConnectMultiMapIds(),s=this.ConnectGround(),i=ModelManager_1.ModelManager.WorldMapModel.WorldMapCurrentMultiMapId??0,s=s||e===i||t.includes(i),r&&s):r}OnUpdate(e){super.OnUpdate(e),1===this.MapType&&this.mrl()}GetIsSelectThisFloor(){var e,t,i;return this.IsMultiMap()?(e=this.GetMultiMapId(),t=this.MarkConfig.MultiMapFloorId,1===this.MapType?!!this.InMultiMapArea(e)||this.InMultiMapArea(t):(i=ModelManager_1.ModelManager.WorldMapModel.WorldMapCurrentMultiMapId??0)===e||i===t):this.LocateInGround()}mrl(){var e=this.IsSelectThisFloor;this.IsSelectThisFloor=this.GetIsSelectThisFloor(),e!==this.IsSelectThisFloor&&this.crl()}crl(){var e;this.InnerView&&(e=this.InnerView)&&e.UpdateIcon()}}exports.CaveHoleMarkItem=CaveHoleMarkItem;
//# sourceMappingURL=CaveHoleMarkItem.js.map