
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MapMarkMgr=void 0;const Log_1=require("../../../../../../Core/Common/Log"),Protocol_1=require("../../../../../../Core/Define/Net/Protocol"),EntitySystem_1=require("../../../../../../Core/Entity/EntitySystem"),Vector_1=require("../../../../../../Core/Utils/Math/Vector"),ObjectUtils_1=require("../../../../../../Core/Utils/ObjectUtils"),EventDefine_1=require("../../../../../Common/Event/EventDefine"),EventSystem_1=require("../../../../../Common/Event/EventSystem"),ConfigManager_1=require("../../../../../Manager/ConfigManager"),ModelManager_1=require("../../../../../Manager/ModelManager"),WorldMapDefine_1=require("../../../../WorldMap/WorldMapDefine"),MapController_1=require("../../../Controller/MapController"),MapDefine_1=require("../../../MapDefine"),MapUtil_1=require("../../../MapUtil"),CustomMarkItem_1=require("../../../Marks/MarkItem/CustomMarkItem"),MarkItemUtil_1=require("../../../Marks/MarkItemUtil"),MapLogger_1=require("../../../Misc/MapLogger"),MapMarkContainer_1=require("./MapMarkContainer");class MapMarkMgr{constructor(t,e,i,s,r){this.tUi=void 0,this.iUi=new WorldMapDefine_1.MarkPriority2HierarchyIndexHelper,this.oUi=new WorldMapDefine_1.MarkPriority2HierarchyIndexHelper,this.MapType=2,this.ylh=new MapMarkContainer_1.MapMarkContainer,this.lUi=1,this._Ui=0,this.uUi=t=>{this.cUi(t)},this.mUi=t=>{this.dUi(t)},this.ixa=t=>{if(t===this.MapType){var i=this.GetMarkItemsByType(9);let e=`---自定义标记信息---地图类型:${t}
`;i?.forEach(t=>{e=""+e+`MarkId:${t.MarkId},
UiPosition:${t.UiPosition.ToString()},
WorldPosition:${t.WorldPosition.ToString()}

`}),Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Map",63,e)}},this.wll=(t,e,i)=>{e=this.iUi.AddMarkItem(e,i);t.SetHierarchyIndex(e)},this.Bll=(t,e)=>{this.iUi.RemoveMarkItem(t,e)},this.CreateDynamicMark=(t,e=!0)=>{if(e&&this.ylh.ExistMarkItemTask(t.MarkType,t.MarkId))return void MapLogger_1.MapLogger.ErrorOnce(t.MarkId,63,"MarkMgr.CreateDynamicMark->重复添加标记,任务队列已存在",["MarkId",t.MarkId],["MarkType",t.MarkType]);if(this.ylh.ExistMarkItem(t.MarkType,t.MarkId))MapLogger_1.MapLogger.ErrorOnce(t.MarkId,63,"MarkMgr.CreateDynamicMark->重复添加标记,已存在",["MarkId",t.MarkId],["MarkType",t.MarkType]);else{e=MarkItemUtil_1.MarkItemUtil.Create(t,this.MapType,this.lUi,this.tUi);if(e)return this.AddMarkItem(e.MarkType,e),e}},this.CreateTempMapMark=t=>{var e=ConfigManager_1.ConfigManager.MapConfig.GetConfigMark(t);if(e){var i=this.ylh.GetMarkItem(e.ObjectType,t);if(void 0!==i)i.MarkItemEntity.IsTempMapMark=!0;else{i=MarkItemUtil_1.MarkItemUtil.CreateConfigMark(e.MarkId,e,this.MapType,this.lUi,this.tUi);if(i)return i.MarkItemEntity.IsTempMapMark=!0,this.AddMarkItem(i.MarkType,i),i}}else MapLogger_1.MapLogger.DebugOnce(t,63,"创建临时静态标记失败,找不到MapMark配置",["MapMarkId",t])},this.CUi=(t,e,i)=>{e=this.GetMarkItem(t,e);e&&e instanceof CustomMarkItem_1.CustomMarkItem&&(e.SetConfigId(i),e.IsTracked)&&(this.gUi(t,e.MarkId,!1),this.gUi(t,e.MarkId,!0))},this.fUi=(t,e)=>{this.ylh.RemoveDynamicMark(t,e)},this.gUi=(t,e,i,s=!1)=>{this.ylh.TrackMapMark(t,e,i,s)},this.ngt=t=>{this.ylh.TrackMark(t)},this.sgt=t=>{this.ylh.UnTrackMark(t)},this._Xt=()=>{this.ylh.ClearTrackMark()},this.pUi=()=>{var t=this.GetMarkItemsByType(11);t&&0<t.size&&this.vUi(11),this.MUi(),EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName.PlayerMarkItemChanged)},this.uRi=t=>{t=this.GetMarkItem(0,t);void 0!==t&&t.IsTracked&&MapController_1.MapController.RequestTrackMapMark(t.MarkType,t.MarkId,!1)},this.Jpe=(t,e,i)=>{var s=e.Entity.GetComponent(0),r=s.GetPbEntityInitData(),n=s.GetEntityConfigType();n===Protocol_1.Aki.Protocol.rLs.Proto_OldEntity||n===Protocol_1.Aki.Protocol.rLs.Proto_Character||MapUtil_1.MapUtil.IsTemporaryTeleportEntity(r)||(n=s.GetBaseInfo())?.MapIcon&&this.EUi(n.MapIcon,e.Id,i)},this.zpe=(t,e)=>{this.ylh.RemoveNeedUpdateMark(e.Id),this.RemoveMarkItem(7,e.Id)?.Destroy()},this.MapType=t,this._Ui=e,this.lUi=r,this.tUi=i}Initialize(){this.dde()}Dispose(){this.Cde(),this.vUi()}OnMapSetup(){this.vUi(),this.SUi(),this.yUi(),this.MUi()}dde(){EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.MapReplaceMarkResponse,this.CUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.CreateMapMark,this.CreateDynamicMark),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.CreateTempMapMark,this.CreateTempMapMark),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.RemoveMapMark,this.fUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.TrackMapMark,this.gUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.TrackMark,this.ngt),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.UnTrackMark,this.sgt),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.ClearTrackMark,this._Xt),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.ScenePlayerChanged,this.pUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.ScenePlayerLeaveScene,this.pUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.UnlockTeleport,this.uRi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.AddEntity,this.Jpe),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.RemoveEntity,this.zpe),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.OnMarkItemViewCreate,this.uUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.OnMarkItemViewDestroy,this.mUi),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.TakeMarkComponentEnterContainer,this.wll),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.TakeMarkComponentExitContainer,this.Bll),EventSystem_1.EventSystem.Add(EventDefine_1.EEventName.LogCustomMarkInfo,this.ixa)}Cde(){EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.MapReplaceMarkResponse,this.CUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.CreateMapMark,this.CreateDynamicMark),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.CreateTempMapMark,this.CreateTempMapMark),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.RemoveMapMark,this.fUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.TrackMapMark,this.gUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.TrackMark,this.ngt),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.ClearTrackMark,this._Xt),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.ScenePlayerChanged,this.pUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.ScenePlayerLeaveScene,this.pUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.UnlockTeleport,this.uRi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.AddEntity,this.Jpe),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.RemoveEntity,this.zpe),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.UnTrackMark,this.sgt),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.OnMarkItemViewCreate,this.uUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.OnMarkItemViewDestroy,this.mUi),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.TakeMarkComponentEnterContainer,this.wll),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.TakeMarkComponentExitContainer,this.Bll),EventSystem_1.EventSystem.Remove(EventDefine_1.EEventName.LogCustomMarkInfo,this.ixa)}vUi(t){this.ylh.ClearMarkItems(t),t||(this.iUi.ClearData(),this.oUi.ClearData())}AddMarkItem(t,e){this.ylh.AddMarkItem(t,e)}RemoveMarkItem(t,e){return this.ylh.RemoveMarkItem(t,e)}DUi(t,e,i){var s=t.Holder;s&&this.MapType===s.MapType&&void 0!==e&&t.GetRootItem()&&(t.GetRootItem().SetUIParent(e),t.SetScale(this.lUi),e=i.AddMarkItem(s.MarkType,s.ShowPriority),t.GetRootItem().SetHierarchyIndex(e))}RUi(t,e,i){var s=t.Holder;s&&this.MapType===s.MapType&&t.GetRootItem()&&e===t.GetRootItem().GetParentAsUIItem()&&(i.RemoveMarkItem(t.Holder.MarkType,t.Holder.ShowPriority),t.SetScale(this.lUi))}cUi(t){this.DUi(t,this.tUi,this.iUi)}dUi(t){this.RUi(t,this.tUi,this.iUi)}GetMarkItemsByType(t,e=!0){return this.ylh.GetMarkItemsByType(t,e)}GetMarkItem(t,e){return this.ylh.GetMarkItem(t,e)}GetAllMarkItems(){return this.ylh.GetAllMarkItems()}GetMarkItemsByClickPosition(t){return this.ylh.GetMarkItemsByClickPosition(t)}UpdateNearbyMarkItem(t,e,i){this.ylh.UpdateNearbyMarkItem(t,e,i)}Tick(){this.ylh.Tick()}FindNearbyMarkItems(t,e,i){return this.ylh.FindNearbyMarkItems(t,e,i)}SUi(){var t;for(const i of ConfigManager_1.ConfigManager.MapConfig.GetConfigMarks(this._Ui)){var e=ModelManager_1.ModelManager.TrackModel.IsTracking(1,i.MarkId);1!==i.CreateOnStart&&!e||(e=this._Ui===i.MapId,this.ylh.AddCreateMarkTask(e,i.ObjectType,i.MarkId,()=>{var t=MarkItemUtil_1.MarkItemUtil.CreateConfigMark(i.MarkId,i,this.MapType,this.lUi,this.tUi);this.AddMarkItem(i.ObjectType,t)}))}for(const[s,r]of ModelManager_1.ModelManager.MapModel.GetEntityPendingList()){const n=EntitySystem_1.EntitySystem.Get(s);n?(t=ConfigManager_1.ConfigManager.MapConfig.GetConfigMark(r),this.ylh.AddCreateMarkTask(!0,t?.ObjectType??0,r,()=>{var t=n.GetComponent(1)?.Owner;this.EUi(r,s,t)})):Log_1.Log.CheckDebug()&&Log_1.Log.Debug("Map",63,"找不到实体对象",["实体ID",s.toString()])}this.nKl()}nKl(){var t;for(const e of ModelManager_1.ModelManager.MapModel.GetPendingAddTempMapMarkList()){const i=ConfigManager_1.ConfigManager.MapConfig.GetConfigMark(e);i?void 0!==(t=this.ylh.GetMarkItem(i.ObjectType,e))?t.MarkItemEntity.IsTempMapMark=!0:(t=this._Ui===i.MapId,this.ylh.AddCreateMarkTask(t,i.ObjectType,i.MarkId,()=>{var t=MarkItemUtil_1.MarkItemUtil.CreateConfigMark(i.MarkId,i,this.MapType,this.lUi,this.tUi);t.MarkItemEntity.IsTempMapMark=!0,this.AddMarkItem(i.ObjectType,t)})):MapLogger_1.MapLogger.DebugOnce(e,63,"创建临时静态标记失败,找不到MapMark配置",["MapMarkId",e])}}yUi(){for(const e of ModelManager_1.ModelManager.MapModel.GetAllDynamicMarks().values())for(const i of e.values()){var t=i.MapId===this._Ui;this.ylh.AddCreateMarkTask(t,i.MarkType,i.MarkId,()=>{this.CreateDynamicMark(i,!1)})}}MUi(){if(ModelManager_1.ModelManager.OnlineModel.GetIsTeamModel()){var t,e;for(const i of ModelManager_1.ModelManager.CreatureModel.GetAllScenePlayers())i.GetPlayerId()!==ModelManager_1.ModelManager.PlayerInfoModel.GetId()&&(t=ModelManager_1.ModelManager.OnlineModel?.GetCurrentTeamListById(i.GetPlayerId())?.PlayerNumber??1,t=new MapDefine_1.PlayerMarkCreateInfo(i.GetPlayerId(),t,i.GetLocation().ToUeVectorOld(),ModelManager_1.ModelManager.CreatureModel.GetInstanceId()),t=MarkItemUtil_1.MarkItemUtil.Create(t,this.MapType,this.lUi,this.tUi),MapUtil_1.MapUtil.IsInBigWorld(this._Ui)&&(t.IsInAoiRange=!0),this.AddMarkItem(11,t));for(const s of ModelManager_1.ModelManager.OnlineModel.OtherScenePlayerDataList)s.PlayerId!==ModelManager_1.ModelManager.PlayerInfoModel.GetId()&&(e=ModelManager_1.ModelManager.OnlineModel?.GetCurrentTeamListById(s.PlayerId)?.PlayerNumber??1,e=new MapDefine_1.PlayerMarkCreateInfo(s.PlayerId,e,s.Location?.ToUeVectorOld()??Vector_1.Vector.ZeroVector,s.MapId),e=MarkItemUtil_1.MarkItemUtil.Create(e,this.MapType,this.lUi,this.tUi),MapUtil_1.MapUtil.IsInBigWorld(this._Ui)&&(e.IsInAoiRange=!0),this.AddMarkItem(11,e))}}GetTrackMenuMarkList(){return this.ylh.GetTrackMenuMarkList()}GetNavigateMarkList(){return this.ylh.GetNavigateMarkList()}EUi(t,e,i){ObjectUtils_1.ObjectUtils.IsValid(i)&&(e=MarkItemUtil_1.MarkItemUtil.CreateEntityMark(e,t,this.tUi,i,this.MapType,this.lUi),this.AddMarkItem(7,e))}}exports.MapMarkMgr=MapMarkMgr;
//# sourceMappingURL=MapMarkMgr.js.map